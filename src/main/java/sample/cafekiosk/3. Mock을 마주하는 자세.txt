----------------------------------------------------------------------------------

Mockito로 Stubbing하기

Mock을 언제, 어디서, 어떻게 사용해야할지?

요구사항 :
주문 통계

Mock bean을 사용하면 어떻게 동작할지 원하는대로 설정 할 수 있다.
이를 stubbing 한다고 함.

긴 흐름을 갖는 테스트에는 @Transactional을 걸지 않는게 좋다.
왜냐하면 여러 트랜잭션을 발생시켜야하는 테스트인데
@Transactional을 걸어버리면 하나의 트랜잭션으로 묶이기 때문에
실제 환경과 다르게 동작할 수 있음

실제 데이터베이스와 상호작용이 있을 경우에만 @Transactional을 쓰면 됨.

----------------------------------------------------------------------------------

Test Double

Test Double이라고 2번 테스트 하는거 아닙니다.
이게 뭐냐면
스턴트 맨을 떠올리시면 됩니다.
갑자기 무슨 스턴트 맨이냐구요.
서구권에서는 스턴트 맨을 Stunt Double이라고 합니다.
여기에서 Test Double을 따왔음.

참고하시구요.
아무튼 Test Double에 대해서 알아볼 건데 종류가 5가지가 있습니다.
자세히 살펴보면

1) Dummy : 아무것도 안하는 깡통이구요.
2) Fake : 단순한 기능만 수행할 수 있음, 복잡한 기능은 수행을 못함요
3) Stub : 미리 요청한 결과를 수행함, 상태 검증이라는 걸 하구요
4) Spy : Stub + 기록하는 기능 추가한 것
5) Mock : 미리 요청한 결과를 수행함, 행위 검증이라는 걸 함

여기서 Stub이랑 Mock이 겹치는 것 같은데요
미리 요청한 결과를 수행해주긴 하는데 둘의 차이가 뭐냐면
상태 검증과 행위 검증입니다.
괜히 개발자들이 변태처럼 어렵게 설명해놨는데

쉽게 말하자면
상태 검증은 결과만 보는거구요
행위 검증은 과정 + 결과를 보는겁니다.

예를 들어, A에서 B까지 가는길에 5가지 방법이 있다고 합시다.
각각을 a, b, c, d, e라고 했을때 c로 가는게 가장 빠르다고 하겠습니다.

여기서 상태 검증은 A가 B로 도착만 했으면 어떻게 왔든 신경 안쓰는 것입니다. 도착하기만 하면 됐지 알빠노?하고 생각하는 거구요.
행위 검증은 A에서 B로 올때 어떤 길로 왔는지까지 신경을 쓰는 겁니다. c로 왔음? 하고 물어볼 수 있는것임.

----------------------------------------------------------------------------------

순수 Mockito로 검증해보기
@Mock, @Spy, @InjectMocks

Spy는 객체의 기능 중 선택한 기능은 가짜로 만들고
나머지는 원래 객체의 기능을 그대로 수행할때 사용합니다.
쉽게 말하자면
예를 들어, A 객체가 있다고 해봅시다.
여기서 a, b, c, d라는 메서드가 있는거예요.
저는 여기서 a만 가짜로 하고 싶습니다.
그럼
doReturn(원하는결과)
    .when(A)
    .a();
뭐 이런식으로 a가 원하는 결과를 수행했다고 가짜로 만드는거임
나머지는 따로 지정안하면 그대로 기능 수행합니다.

근데 실제로 많이 사용할 일은 없음요.

@InjectMocks를 정확히 이해해봅시다.
먼저 A, B, C, D라는 객체가 있다고 해봅시다.
여기서 A는 B, C, D에 의존하고 있구요.

이때 @InjectMocks를 A에 달아줄 경우
B, C, D는 어떻게 되는거예요.
A가 작동하려면 B, C, D가 필요한거 아님?

@InjectMocks가 이걸 자동으로 해결해줍니다.
2가지 경우를 생각할 수 있는데
B, C, D를 Mock 객체로 만들어두었을때는
Mock객체가 자동으로 A에 주입되구요.

B, C, D가 Mock 객체가 아닐 경우에는
실제 객체를 A에 주입합니다.
근데 이러면 테스트할때 영향 받는게 많아짐.
테스트할때는 영향을 안받는게 좋다고 했었죠.
그래서 B, C, D 같은 애들을 Mock 객체로 만들어두고 사용하시면 됩니다.

----------------------------------------------------------------------------------

BDDMockito

given when then은 BDD 스타일이라고 했습니다.
Mockito를 사용하면 Mock 객체를 쉽게 만들 수 있다고 했죠.

근데 MailServiceTest 예시를 보면
given절에 when으로 어떤 결과를 만들지 설정하고 있습니다.
이거 뭔가 이상하지 않나요.

given절인데 왜 when()으로 설정함?
이러니까 헷갈리고 어색한 것 같습니다.

이를 해결해주는 것이 바로 BDDMockito임
Mockito랑 다 똑같은데 when이 아니라 given으로 바뀌었다는 것이 차이점이구요.
아무튼 앞으로는 헷갈리지 않게 BDDMockito를 사용해서 테스트 코드 작성하도록 합시다.

----------------------------------------------------------------------------------

Classicist vs Mockist

Classicist
실제 객체 사용
상태 기반 테스트 : 결과만 봄
통합 테스트 성향

실제 동작할때 객체를 통합해서 동작하면 달라질 수 있는건데
Mock 객체 사용하면 안되는거 아님?

우리 시스템 <-> 외부 시스템
처럼 시스템이 달라질 경우에만 Mock 처리해야하는 것 아님?

---

Mockist
Mock 객체 사용
행동 기반 테스트 : 과정을 중요시 봄 ( 객체간 상호작용, 메서드가 호출됐는지 등 )
단위 테스트 성향

각각 분리해서 이미 테스트 해놨으니까
통합 테스트 할때는 Mock 객체 사용해서 빠르게 테스트 ㄱㄱ

----------------------------------------------------------------------------------
