----------------------------------------------------------------------------------

레이어드 아키텍처(Layered Architecture)와 테스트

많이들 사용하는 Spring MVC 패턴이죠 레이어드 아키텍처.

1) Presentation Layer
2) Business Layer
3) Persistence Layer
4) Infrastructure Layer

이런식으로 3-tier 아니면 4-tier로 나눠는데
이때 왜 레이어를 이런식으로 분리하는건지 생각해볼 필요가 있습니다.

결론부터 말하자면 관심사를 분리하기 위해서인데
분리하면 좋은점은 레이어마다 책임질 영역이 정해지게 돼서 ( 당연히 관심사가 책임질 부분임 )
유지보수가 편리해진다는 것입니다.

그럼 이제 통합 테스트가 뭔지 알아봅시다.
여러 모듈이 협력했을때 어떻게 작동하는지 검증하는 테스트인데
모듈이 뭐냐면 기능 1개를 구현해내는데 필요한 단위입니다.
그래서 작게는 클래스 1개가 될 수 있고
여러개 모여야만 하나의 기능을 할 수 도 있기 때문에 여러 클래스를 묶어서 하나의 모듈이라고 부를 수 도 있습니다.

그럼 이제 모듈 A와 모듈 B를 함께 실행시켰다고 해봅시다.
그럼 이거 어떻게 작동하죠
순서대로 AB?
아님 반대로 BA?
아님 전혀 다른 C?

결론은 어떻게 동작할지를 모른다가 답입니다.
그래서 모듈이 여러개라면 어떻게 동작할지를 보장하기 위해 통합 테스트를 진행하는 겁니다.

그래서 단위 테스트만으로는 전체 기능을 보장해줄 수 없어서 통합 테스트도 진행해야함.

그럼 이제 레이어 별로 끊어서 테스트를 해볼건데
각각 단위테스트 관점과 통합 테스트 관점
이 2개의 관점에서 살펴봅시다.

----------------------------------------------------------------------------------