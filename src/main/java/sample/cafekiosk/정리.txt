
일을 잘하는 개발자들이 하나같이 말하는 것 중 하나는
테스트가 중요하다입니다.

왜 중요할까요?
왜 중요한지 모르고 그냥 따라서 만들기만 하면 AI가 바로 대체하구요.
결론부터 말씀드리면
프로젝트의 신뢰도와 관계가 있기 때문입니다.

신뢰도가 왜 중요하냐구요.
인터넷 쇼핑몰에서 옷 주문하거나 배달어플로 음식시켜먹을때
리뷰같은거 확인하지 않습니까

왜 확인합니까
옷 품질이 구려서 못입는건 아닌지 혹은
음식점이 믿을만한지 맛있다는 평가는 받는지 등의 신뢰도를 확인하기 위해서 아닙니까

이렇듯 신뢰도는 곧 돈과 직결되기때문에 테스트는 중요하구요.

무엇보다 테스트 코드를 만들어놓지 않으면
매번 기능 만들고나서 팀원들이랑 버그가 있는지 없는지 함께 고민해봐야함

빨리 만들기만 하면 달리는 기차에 나무로 만든 바퀴 달아놓는 거랑 비슷하구요.
언제 부숴질지 모르는 불안감을 안고 가야합니다.

그럼 두번째로 테스트 코드를 잘 작성한다는건 무슨 의미일까요

프로젝트를 만들다보면 계속해서 기능 개발을 하게 될텐데
A라는 기능을 개발하고 테스트를 진행했을때는 문제가 없었지만
B라는 기능을 개발하던중에 A 코드의 일부를 수정해야할 일이 생겼다고 합시다.
이럴 경우 B도 테스트하지만 A도 다시 한 번 잘 작동하는지 테스트를 다시 진행해봐야합니다.
사람이 일일이 이걸 다 확인하고 있으면 물론 그렇게 해도 되겠지만
시간과 인력이 너무 많이 필요하지 않겠습니까

그럼 테스트 코드를 작성해서 기계가 테스트할 수 있게 만들면
효율적일 것 같은데요
이를 위해서 테스트 코드를 잘 작성하는게 중요하구요.

수동 테스트를 진행하다보면 개발 속도보다 테스트 속도가 느리기 때문에 전체적인 흐름 자체가 느려집니다.
이를 위해서도 자동화된 테스트는 꼭 필요함

테스트 코드를 제대로 짜지 않으면 생기는 문제점도 있습니다.
알아보지 못하게 코드를 작성해놓으면
팀원들이 그냥 훑어보고 테스트 코드 작성돼있으니까 잘 동작하나보다 하고 넘어가서
더 큰 문제가 발생할 수 도 있구요.

오히려 테스트 코드도 리팩토링 해봐야하는 짐덩어리가 될 수 있습니다.

잘 작성하면 테스트 코드 자체가 팀 전체가 공유하는 지식이 될 수 있고
개발 속도도 빨라지기 때문에 꼭 작성하는게 좋구요.


----------------------------------------------------------------------------------

그럼 이제 단위 테스트라는 걸 배워봅시다.

이걸 위해 간단한 예시로 카페의 키오스크 기계에 들어갈 소프트웨어를 만들어봅시다.

단위테스트가 주제니까 unit이라는 디렉토리에 만들면 좋을 것 같습니다.
여기에 CafeKiosk랑 기타 등등 필요한 걸 만들면 됨.

그리고 CafeKiosk가 잘 작동하는지 테스트하기 위해
CafeKioskTest라는 파일을 만들어서 테스트 코드를 작성해봤습니다. ( 참고로 단축키는 컨트롤 쉬프트 T 누르면 됨 )
근데 문제점이 있지 않습니까.
테스트 코드의 장점은 테스트를 자동화할 수 있는 것이라 했습니다.
근데 이건 사람이 눈으로 확인해야하는데요.
뭔가 잘못됐죠. 이건 수동테스트입니다.

문제점
1. 사람이 직접 확인해야함
2. 다른 사람이 봤을때 뭘 검증해야하는지 모르고 어떤게 맞고 틀린지도 확인이 불가능 함
3. 무조건 성공하는 케이스임

----------------------------------------------------------------------------------

테스트에는 단위테스트, 통합테스트, 인수테스트 같은게 있습니다.

단위테스트는 클래스나 메서드같은 작은 단위를 테스트하는데 이때 독립적이어야 하는데
쉽게 말하자면 외부에 영향을 받지 않고 혼자서 실행이 가능하게 만들라는 건데
예를 들면, 네트워크에 연결되어야만 한다는지 하는 식으로 외부 상황에 의존하지 않도록 하면 됩니다.

이걸 위해선 2가지 도구를 사용하면 됨.

(1) JUnit5 : 단위 테스트를 위한 테스트 프레임워크
( 참고로 XUnit의 Java 버전이 JUnit임. SUnit, JUnit, NUnit 등이 있음 )

(2) AssertJ : 테스트 코드 작성을 원할하게 돕는 테스트 라이브러리
풍부한 API, 메서드 체이닝 지원 ( 깔끔한 코드 작성 가능 )

AssertJ를 사용하면 직관적인 테스트 코드 작성이 가능합니다.
그럼 이제 직접 단위 테스트 코드를 작성해보도록 합시다.
CafeKioskTest를 이어서 작성해보도록 합시다.

----------------------------------------------------------------------------------